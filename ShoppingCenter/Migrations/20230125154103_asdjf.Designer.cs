// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingCenter.Areas.Identity.Data;

#nullable disable

namespace ShoppingCenter.Migrations
{
    [DbContext(typeof(IdentityContext))]
    [Migration("20230125154103_asdjf")]
    partial class asdjf
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ItemItemCategory", b =>
                {
                    b.Property<Guid>("CategoriesItemCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("itemsItemId")
                        .HasColumnType("int");

                    b.HasKey("CategoriesItemCategoryId", "itemsItemId");

                    b.HasIndex("itemsItemId");

                    b.ToTable("ItemItemCategory");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ShoppingCenter.Models.CustomerShoppingCart", b =>
                {
                    b.Property<Guid>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CustomerId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("CustomersShoppingCarts");
                });

            modelBuilder.Entity("ShoppingCenter.Models.CustomerShoppingCartItem", b =>
                {
                    b.Property<Guid>("CustomerShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerShoppingCartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ItemId1")
                        .HasColumnType("int");

                    b.HasKey("CustomerShoppingCartItemId");

                    b.HasIndex("CustomerShoppingCartId");

                    b.HasIndex("ItemId1");

                    b.ToTable("CustomerShoppingCartItems");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int>("AvailabilityItem")
                        .HasColumnType("int");

                    b.Property<string>("ColorItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DescriptionItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("PriceItem")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SizeItem")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId");

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            ItemId = 1,
                            AvailabilityItem = 5,
                            ColorItem = "WHITE",
                            NameItem = "T shirt",
                            PriceItem = 59m,
                            SizeItem = "S",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 2,
                            AvailabilityItem = 7,
                            ColorItem = "BLACK",
                            NameItem = "T shirt",
                            PriceItem = 65m,
                            SizeItem = "M",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 3,
                            AvailabilityItem = 5,
                            ColorItem = "BLUE WITH PRINT",
                            NameItem = "T shirt",
                            PriceItem = 79m,
                            SizeItem = "L",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 4,
                            AvailabilityItem = 5,
                            ColorItem = "Black",
                            NameItem = "Trousers",
                            PriceItem = 99m,
                            SizeItem = "42",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 5,
                            AvailabilityItem = 5,
                            ColorItem = "Green",
                            NameItem = "Jacket",
                            PriceItem = 129m,
                            SizeItem = "44",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 6,
                            AvailabilityItem = 5,
                            ColorItem = "White",
                            NameItem = "LEGO",
                            PriceItem = 59m,
                            SizeItem = "1000 bricks",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 7,
                            AvailabilityItem = 5,
                            ColorItem = "White",
                            NameItem = "LEGO",
                            PriceItem = 59m,
                            SizeItem = "S",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 8,
                            AvailabilityItem = 5,
                            ColorItem = "White",
                            NameItem = "banana",
                            PriceItem = 59m,
                            SizeItem = "S",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        },
                        new
                        {
                            ItemId = 9,
                            AvailabilityItem = 5,
                            ColorItem = "White",
                            NameItem = "apple",
                            PriceItem = 59m,
                            SizeItem = "S",
                            Url = "https://images.pexels.com/photos/639024/pexels-photo-639024.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1"
                        });
                });

            modelBuilder.Entity("ShoppingCenter.Models.ItemCategory", b =>
                {
                    b.Property<Guid>("ItemCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ItemCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("ShoppingCenter.Models.ItemTransaction", b =>
                {
                    b.Property<Guid>("ItemTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ItemId1")
                        .HasColumnType("int");

                    b.Property<decimal>("PriceItem")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ItemTransactionId");

                    b.HasIndex("ItemId1");

                    b.HasIndex("TransactionId");

                    b.ToTable("Transaction_Items");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Shop", b =>
                {
                    b.Property<int>("ShopId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ShopId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Level")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShopName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShopId");

                    b.ToTable("Shop");

                    b.HasData(
                        new
                        {
                            ShopId = 1,
                            Description = "Clothes shop, t-shirts, trouser and hoodies!",
                            Level = "0",
                            ShopName = "Clothes Shop"
                        },
                        new
                        {
                            ShopId = 2,
                            Description = "Toys shop, teddy bears, LEGO and many more toys for you!",
                            Level = "1",
                            ShopName = "Toys Shop"
                        },
                        new
                        {
                            ShopId = 3,
                            Description = "Food shop, vegetables, fruits, fresh juice.",
                            Level = "1",
                            ShopName = "Toys Shop"
                        });
                });

            modelBuilder.Entity("ShoppingCenter.Models.ShopCategory", b =>
                {
                    b.Property<Guid>("ShopCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ShopCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("ShopCategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopCategory");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Shop_Items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("ShopId");

                    b.ToTable("Shop_Items");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ItemId = 1,
                            ShopId = 1
                        },
                        new
                        {
                            Id = 2,
                            ItemId = 2,
                            ShopId = 1
                        },
                        new
                        {
                            Id = 3,
                            ItemId = 3,
                            ShopId = 1
                        },
                        new
                        {
                            Id = 4,
                            ItemId = 4,
                            ShopId = 1
                        },
                        new
                        {
                            Id = 5,
                            ItemId = 5,
                            ShopId = 1
                        },
                        new
                        {
                            Id = 6,
                            ItemId = 6,
                            ShopId = 2
                        },
                        new
                        {
                            Id = 7,
                            ItemId = 7,
                            ShopId = 2
                        },
                        new
                        {
                            Id = 8,
                            ItemId = 8,
                            ShopId = 3
                        },
                        new
                        {
                            Id = 9,
                            ItemId = 9,
                            ShopId = 3
                        });
                });

            modelBuilder.Entity("ShoppingCenter.Models.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerId1")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("TransactionId");

                    b.HasIndex("CustomerId1");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("ItemItemCategory", b =>
                {
                    b.HasOne("ShoppingCenter.Models.ItemCategory", null)
                        .WithMany()
                        .HasForeignKey("CategoriesItemCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCenter.Models.Item", null)
                        .WithMany()
                        .HasForeignKey("itemsItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ShoppingCenter.Models.CustomerShoppingCart", b =>
                {
                    b.HasOne("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShoppingCenter.Models.CustomerShoppingCartItem", b =>
                {
                    b.HasOne("ShoppingCenter.Models.CustomerShoppingCart", "CustomerShoppingCart")
                        .WithMany("CustomerShoppingCartItems")
                        .HasForeignKey("CustomerShoppingCartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCenter.Models.Item", "Item")
                        .WithMany("CustomerShoppingCartItem")
                        .HasForeignKey("ItemId1");

                    b.Navigation("CustomerShoppingCart");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("ShoppingCenter.Models.ItemTransaction", b =>
                {
                    b.HasOne("ShoppingCenter.Models.Item", "Item")
                        .WithMany("ItemTransactions")
                        .HasForeignKey("ItemId1");

                    b.HasOne("ShoppingCenter.Models.Transaction", "Transaction")
                        .WithMany("ItemsTransaction")
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("ShoppingCenter.Models.ShopCategory", b =>
                {
                    b.HasOne("ShoppingCenter.Models.Shop", null)
                        .WithMany("Categories")
                        .HasForeignKey("ShopId");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Shop_Items", b =>
                {
                    b.HasOne("ShoppingCenter.Models.Item", "Item")
                        .WithMany("Shop_Items")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShoppingCenter.Models.Shop", "Shop")
                        .WithMany("Shop_Items")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Transaction", b =>
                {
                    b.HasOne("ShoppingCenter.Areas.Identity.Data.ShoppingCenterUser", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId1");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("ShoppingCenter.Models.CustomerShoppingCart", b =>
                {
                    b.Navigation("CustomerShoppingCartItems");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Item", b =>
                {
                    b.Navigation("CustomerShoppingCartItem");

                    b.Navigation("ItemTransactions");

                    b.Navigation("Shop_Items");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Shop", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("Shop_Items");
                });

            modelBuilder.Entity("ShoppingCenter.Models.Transaction", b =>
                {
                    b.Navigation("ItemsTransaction");
                });
#pragma warning restore 612, 618
        }
    }
}
